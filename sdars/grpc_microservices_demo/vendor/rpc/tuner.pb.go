// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tuner.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Messages prefixed with Tuner so they dont collide with other same named but maybe different content messages in package rpc
type TunerUpdateStationListRequest struct {
	Stations             []string `protobuf:"bytes,1,rep,name=stations,proto3" json:"stations,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunerUpdateStationListRequest) Reset()         { *m = TunerUpdateStationListRequest{} }
func (m *TunerUpdateStationListRequest) String() string { return proto.CompactTextString(m) }
func (*TunerUpdateStationListRequest) ProtoMessage()    {}
func (*TunerUpdateStationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89efdcf1f110f190, []int{0}
}

func (m *TunerUpdateStationListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunerUpdateStationListRequest.Unmarshal(m, b)
}
func (m *TunerUpdateStationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunerUpdateStationListRequest.Marshal(b, m, deterministic)
}
func (m *TunerUpdateStationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunerUpdateStationListRequest.Merge(m, src)
}
func (m *TunerUpdateStationListRequest) XXX_Size() int {
	return xxx_messageInfo_TunerUpdateStationListRequest.Size(m)
}
func (m *TunerUpdateStationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TunerUpdateStationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TunerUpdateStationListRequest proto.InternalMessageInfo

func (m *TunerUpdateStationListRequest) GetStations() []string {
	if m != nil {
		return m.Stations
	}
	return nil
}

type TunerUpdateSubscriptionRequest struct {
	Active               bool     `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunerUpdateSubscriptionRequest) Reset()         { *m = TunerUpdateSubscriptionRequest{} }
func (m *TunerUpdateSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*TunerUpdateSubscriptionRequest) ProtoMessage()    {}
func (*TunerUpdateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89efdcf1f110f190, []int{1}
}

func (m *TunerUpdateSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunerUpdateSubscriptionRequest.Unmarshal(m, b)
}
func (m *TunerUpdateSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunerUpdateSubscriptionRequest.Marshal(b, m, deterministic)
}
func (m *TunerUpdateSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunerUpdateSubscriptionRequest.Merge(m, src)
}
func (m *TunerUpdateSubscriptionRequest) XXX_Size() int {
	return xxx_messageInfo_TunerUpdateSubscriptionRequest.Size(m)
}
func (m *TunerUpdateSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TunerUpdateSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TunerUpdateSubscriptionRequest proto.InternalMessageInfo

func (m *TunerUpdateSubscriptionRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type TunerTuneToStationRequest struct {
	StationID            uint32   `protobuf:"varint,1,opt,name=stationID,proto3" json:"stationID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunerTuneToStationRequest) Reset()         { *m = TunerTuneToStationRequest{} }
func (m *TunerTuneToStationRequest) String() string { return proto.CompactTextString(m) }
func (*TunerTuneToStationRequest) ProtoMessage()    {}
func (*TunerTuneToStationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89efdcf1f110f190, []int{2}
}

func (m *TunerTuneToStationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunerTuneToStationRequest.Unmarshal(m, b)
}
func (m *TunerTuneToStationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunerTuneToStationRequest.Marshal(b, m, deterministic)
}
func (m *TunerTuneToStationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunerTuneToStationRequest.Merge(m, src)
}
func (m *TunerTuneToStationRequest) XXX_Size() int {
	return xxx_messageInfo_TunerTuneToStationRequest.Size(m)
}
func (m *TunerTuneToStationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TunerTuneToStationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TunerTuneToStationRequest proto.InternalMessageInfo

func (m *TunerTuneToStationRequest) GetStationID() uint32 {
	if m != nil {
		return m.StationID
	}
	return 0
}

func init() {
	proto.RegisterType((*TunerUpdateStationListRequest)(nil), "rpc.TunerUpdateStationListRequest")
	proto.RegisterType((*TunerUpdateSubscriptionRequest)(nil), "rpc.TunerUpdateSubscriptionRequest")
	proto.RegisterType((*TunerTuneToStationRequest)(nil), "rpc.TunerTuneToStationRequest")
}

func init() { proto.RegisterFile("tuner.proto", fileDescriptor_89efdcf1f110f190) }

var fileDescriptor_89efdcf1f110f190 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x29, 0xcd, 0x4b,
	0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x96, 0xe2, 0x49, 0xce,
	0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x08, 0x29, 0x59, 0x73, 0xc9, 0x86, 0x80, 0x54, 0x84, 0x16, 0xa4,
	0x24, 0x96, 0xa4, 0x06, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0xf9, 0x64, 0x16, 0x97, 0x04, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x71, 0x71, 0x14, 0x43, 0x44, 0x8b, 0x25, 0x18, 0x15,
	0x98, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25, 0x0b, 0x2e, 0x39, 0x64, 0xcd, 0xa5, 0x49, 0xc5, 0xc9,
	0x45, 0x99, 0x05, 0x20, 0x39, 0x98, 0x6e, 0x31, 0x2e, 0xb6, 0xc4, 0xe4, 0x92, 0xcc, 0xb2, 0x54,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x28, 0x4f, 0xc9, 0x92, 0x4b, 0x12, 0xac, 0x13, 0x44,
	0x84, 0xe4, 0x43, 0xad, 0x85, 0x69, 0x92, 0xe1, 0xe2, 0x84, 0x5a, 0xe1, 0xe9, 0x02, 0xd6, 0xc7,
	0x1b, 0x84, 0x10, 0x30, 0xba, 0xcf, 0xc8, 0xc5, 0x0a, 0xd6, 0x2b, 0xe4, 0xc1, 0x25, 0x12, 0x54,
	0x90, 0x8c, 0xe1, 0x72, 0x21, 0x25, 0xbd, 0xa2, 0x82, 0x64, 0x3d, 0xbc, 0xde, 0x92, 0xe2, 0x02,
	0xab, 0x71, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0x62, 0x10, 0xf2, 0xe2, 0x12, 0x45, 0x98, 0x84, 0xe4,
	0x0d, 0x21, 0x65, 0x0c, 0xa3, 0x30, 0x3d, 0x89, 0x66, 0x96, 0x03, 0x97, 0x40, 0x50, 0x41, 0x32,
	0x8a, 0xc7, 0x84, 0xe4, 0x10, 0xc6, 0x60, 0xf3, 0x31, 0xaa, 0x09, 0x49, 0x6c, 0xe0, 0xa8, 0x31,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x39, 0xaf, 0x5c, 0xbc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TunerClient is the client API for Tuner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunerClient interface {
	RpcUpdateStationList(ctx context.Context, in *TunerUpdateStationListRequest, opts ...grpc.CallOption) (*Empty, error)
	RpcUpdateSubscription(ctx context.Context, in *TunerUpdateSubscriptionRequest, opts ...grpc.CallOption) (*Empty, error)
	RpcTuneToStation(ctx context.Context, in *TunerTuneToStationRequest, opts ...grpc.CallOption) (*Empty, error)
}

type tunerClient struct {
	cc *grpc.ClientConn
}

func NewTunerClient(cc *grpc.ClientConn) TunerClient {
	return &tunerClient{cc}
}

func (c *tunerClient) RpcUpdateStationList(ctx context.Context, in *TunerUpdateStationListRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Tuner/RpcUpdateStationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunerClient) RpcUpdateSubscription(ctx context.Context, in *TunerUpdateSubscriptionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Tuner/RpcUpdateSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunerClient) RpcTuneToStation(ctx context.Context, in *TunerTuneToStationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rpc.Tuner/RpcTuneToStation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunerServer is the server API for Tuner service.
type TunerServer interface {
	RpcUpdateStationList(context.Context, *TunerUpdateStationListRequest) (*Empty, error)
	RpcUpdateSubscription(context.Context, *TunerUpdateSubscriptionRequest) (*Empty, error)
	RpcTuneToStation(context.Context, *TunerTuneToStationRequest) (*Empty, error)
}

// UnimplementedTunerServer can be embedded to have forward compatible implementations.
type UnimplementedTunerServer struct {
}

func (*UnimplementedTunerServer) RpcUpdateStationList(ctx context.Context, req *TunerUpdateStationListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUpdateStationList not implemented")
}
func (*UnimplementedTunerServer) RpcUpdateSubscription(ctx context.Context, req *TunerUpdateSubscriptionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcUpdateSubscription not implemented")
}
func (*UnimplementedTunerServer) RpcTuneToStation(ctx context.Context, req *TunerTuneToStationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcTuneToStation not implemented")
}

func RegisterTunerServer(s *grpc.Server, srv TunerServer) {
	s.RegisterService(&_Tuner_serviceDesc, srv)
}

func _Tuner_RpcUpdateStationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunerUpdateStationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunerServer).RpcUpdateStationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Tuner/RpcUpdateStationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunerServer).RpcUpdateStationList(ctx, req.(*TunerUpdateStationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tuner_RpcUpdateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunerUpdateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunerServer).RpcUpdateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Tuner/RpcUpdateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunerServer).RpcUpdateSubscription(ctx, req.(*TunerUpdateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tuner_RpcTuneToStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunerTuneToStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunerServer).RpcTuneToStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Tuner/RpcTuneToStation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunerServer).RpcTuneToStation(ctx, req.(*TunerTuneToStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tuner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Tuner",
	HandlerType: (*TunerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcUpdateStationList",
			Handler:    _Tuner_RpcUpdateStationList_Handler,
		},
		{
			MethodName: "RpcUpdateSubscription",
			Handler:    _Tuner_RpcUpdateSubscription_Handler,
		},
		{
			MethodName: "RpcTuneToStation",
			Handler:    _Tuner_RpcTuneToStation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tuner.proto",
}
