// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutProductsNameHandlerFunc turns a function with the right signature into a put products name handler
type PutProductsNameHandlerFunc func(PutProductsNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutProductsNameHandlerFunc) Handle(params PutProductsNameParams) middleware.Responder {
	return fn(params)
}

// PutProductsNameHandler interface for that can handle valid put products name params
type PutProductsNameHandler interface {
	Handle(PutProductsNameParams) middleware.Responder
}

// NewPutProductsName creates a new http.Handler for the put products name operation
func NewPutProductsName(ctx *middleware.Context, handler PutProductsNameHandler) *PutProductsName {
	return &PutProductsName{Context: ctx, Handler: handler}
}

/* PutProductsName swagger:route PUT /products/{name} putProductsName

Withdraw given amount of given product from the fridge

*/
type PutProductsName struct {
	Context *middleware.Context
	Handler PutProductsNameHandler
}

func (o *PutProductsName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutProductsNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutProductsNameBody put products name body
//
// swagger:model PutProductsNameBody
type PutProductsNameBody struct {

	// quantity
	// Example: 1
	// Minimum: 0
	Quantity *float64 `json:"quantity,omitempty"`
}

// Validate validates this put products name body
func (o *PutProductsNameBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutProductsNameBody) validateQuantity(formats strfmt.Registry) error {
	if swag.IsZero(o.Quantity) { // not required
		return nil
	}

	if err := validate.Minimum("product"+"."+"quantity", "body", *o.Quantity, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put products name body based on context it is used
func (o *PutProductsNameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutProductsNameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutProductsNameBody) UnmarshalBinary(b []byte) error {
	var res PutProductsNameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
