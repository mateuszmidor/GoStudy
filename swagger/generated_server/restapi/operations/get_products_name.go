// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetProductsNameHandlerFunc turns a function with the right signature into a get products name handler
type GetProductsNameHandlerFunc func(GetProductsNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProductsNameHandlerFunc) Handle(params GetProductsNameParams) middleware.Responder {
	return fn(params)
}

// GetProductsNameHandler interface for that can handle valid get products name params
type GetProductsNameHandler interface {
	Handle(GetProductsNameParams) middleware.Responder
}

// NewGetProductsName creates a new http.Handler for the get products name operation
func NewGetProductsName(ctx *middleware.Context, handler GetProductsNameHandler) *GetProductsName {
	return &GetProductsName{Context: ctx, Handler: handler}
}

/* GetProductsName swagger:route GET /products/{name} getProductsName

Get single product information

*/
type GetProductsName struct {
	Context *middleware.Context
	Handler GetProductsNameHandler
}

func (o *GetProductsName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProductsNameParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
