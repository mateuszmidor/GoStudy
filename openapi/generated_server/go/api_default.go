/*
 * Fridge API
 *
 * OpenAPI 3.0.0 study - a fridge API
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{ service: s }
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"ProductsGet",
			strings.ToUpper("Get"),
			"/products",
			c.ProductsGet,
		},
		{
			"ProductsNameGet",
			strings.ToUpper("Get"),
			"/products/{name}",
			c.ProductsNameGet,
		},
		{
			"ProductsNamePut",
			strings.ToUpper("Put"),
			"/products/{name}",
			c.ProductsNamePut,
		},
		{
			"ProductsPost",
			strings.ToUpper("Post"),
			"/products",
			c.ProductsPost,
		},
	}
}

// ProductsGet - 
func (c *DefaultApiController) ProductsGet(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	sort := query.Get("sort")
	result, err := c.service.ProductsGet(r.Context(), sort == "true")
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ProductsNameGet - 
func (c *DefaultApiController) ProductsNameGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	name := params["name"]
	result, err := c.service.ProductsNameGet(r.Context(), name)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ProductsNamePut - 
func (c *DefaultApiController) ProductsNamePut(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	name := params["name"]
	inlineObject := &InlineObject{}
	if err := json.NewDecoder(r.Body).Decode(&inlineObject); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ProductsNamePut(r.Context(), name, *inlineObject)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ProductsPost - 
func (c *DefaultApiController) ProductsPost(w http.ResponseWriter, r *http.Request) { 
	product := &Product{}
	if err := json.NewDecoder(r.Body).Decode(&product); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ProductsPost(r.Context(), *product)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
